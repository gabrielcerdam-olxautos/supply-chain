var SupplyChain = artifacts.require("SupplyChain");
var assert = require("assert");
const truffleAssert = require("truffle-assertions");

var supplyChain;
var upc = 1;
var ownerID;
var originFarmerID;
var distributorID;
var retailerID;
var consumerID;
const originFarmName = "John Doe";
const originFarmInformation = "Yarray Valley";
const originFarmLatitude = "-38.239770";
const originFarmLongitude = "144.341490";
var productID = upc;
const productNotes = "Best beans for Espresso";
const productPrice = web3.utils.toWei("1", "ether");
var itemState = 0;
const emptyAddress = "0x00000000000000000000000000000000000000";

contract("SupplyChain", async (accounts) => {
  before("", async () => {
    // console.log("beforeEach");
    supplyChain = await SupplyChain.deployed();
  });
  it("harverstItem", async () => {
    // console.log("supplyChain", supplyChain);
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    ownerID = accounts[0];
    originFarmerID = accounts[1];
    distributorID = accounts[2];
    retailerID = accounts[3];
    consumerID = accounts[4];

    const value = true;
    let tx = await supplyChain.harvestItem(
      upc,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      productNotes,
      { from: originFarmerID }
    );

    truffleAssert.eventEmitted(tx, "Harvested", (ev) => {
      if (ev.upc.toNumber() === upc) {
        assert.equal(ev.upc.toNumber(), 1);
        return ev;
      }
    });
    // Watch the emitted event Harvested()

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    console.log("resultBufferTwo", resultBufferTwo);
    console.log("resultBufferTwo[productNotes]", resultBufferTwo["3"]);
    console.log("productNotes", productNotes);
    assert.equal(1, 1);
    // console.log("eventEmitted", eventEmitted);
    assert.equal(originFarmerID, resultBufferOne[originFarmerID]);
    assert.equal(originFarmerID, resultBufferOne[originFarmerID]);
    assert.equal(originFarmName, resultBufferOne[originFarmName]);
    assert.equal(originFarmLatitude, resultBufferOne[originFarmLatitude]);
    assert.equal(originFarmInformation, resultBufferOne[originFarmInformation]);
    assert.equal(originFarmLongitude, resultBufferOne[originFarmLongitude]);
    assert.equal(productNotes, resultBufferOne["3"]);
  });
  it("processItem", async () => {
    const value = true;
    assert.equal(value, true);
  });
});
